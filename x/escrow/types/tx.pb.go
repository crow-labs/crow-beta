// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgItemReceived struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	EscrowId    uint64 `protobuf:"varint,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
}

func (m *MsgItemReceived) Reset()         { *m = MsgItemReceived{} }
func (m *MsgItemReceived) String() string { return proto.CompactTextString(m) }
func (*MsgItemReceived) ProtoMessage()    {}
func (*MsgItemReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{0}
}
func (m *MsgItemReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemReceived.Merge(m, src)
}
func (m *MsgItemReceived) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemReceived.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemReceived proto.InternalMessageInfo

func (m *MsgItemReceived) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgItemReceived) GetEscrowId() uint64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

type MsgItemReceivedResponse struct {
}

func (m *MsgItemReceivedResponse) Reset()         { *m = MsgItemReceivedResponse{} }
func (m *MsgItemReceivedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgItemReceivedResponse) ProtoMessage()    {}
func (*MsgItemReceivedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{1}
}
func (m *MsgItemReceivedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemReceivedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemReceivedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemReceivedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemReceivedResponse.Merge(m, src)
}
func (m *MsgItemReceivedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemReceivedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemReceivedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemReceivedResponse proto.InternalMessageInfo

type MsgItemDamaged struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	EscrowId    uint64 `protobuf:"varint,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgItemDamaged) Reset()         { *m = MsgItemDamaged{} }
func (m *MsgItemDamaged) String() string { return proto.CompactTextString(m) }
func (*MsgItemDamaged) ProtoMessage()    {}
func (*MsgItemDamaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{2}
}
func (m *MsgItemDamaged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemDamaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemDamaged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemDamaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemDamaged.Merge(m, src)
}
func (m *MsgItemDamaged) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemDamaged) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemDamaged.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemDamaged proto.InternalMessageInfo

func (m *MsgItemDamaged) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgItemDamaged) GetEscrowId() uint64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *MsgItemDamaged) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgItemDamagedResponse struct {
}

func (m *MsgItemDamagedResponse) Reset()         { *m = MsgItemDamagedResponse{} }
func (m *MsgItemDamagedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgItemDamagedResponse) ProtoMessage()    {}
func (*MsgItemDamagedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{3}
}
func (m *MsgItemDamagedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemDamagedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemDamagedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemDamagedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemDamagedResponse.Merge(m, src)
}
func (m *MsgItemDamagedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemDamagedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemDamagedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemDamagedResponse proto.InternalMessageInfo

type MsgItemIncorrect struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	EscrowId    string `protobuf:"bytes,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgItemIncorrect) Reset()         { *m = MsgItemIncorrect{} }
func (m *MsgItemIncorrect) String() string { return proto.CompactTextString(m) }
func (*MsgItemIncorrect) ProtoMessage()    {}
func (*MsgItemIncorrect) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{4}
}
func (m *MsgItemIncorrect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemIncorrect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemIncorrect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemIncorrect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemIncorrect.Merge(m, src)
}
func (m *MsgItemIncorrect) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemIncorrect) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemIncorrect.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemIncorrect proto.InternalMessageInfo

func (m *MsgItemIncorrect) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgItemIncorrect) GetEscrowId() string {
	if m != nil {
		return m.EscrowId
	}
	return ""
}

func (m *MsgItemIncorrect) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgItemIncorrectResponse struct {
}

func (m *MsgItemIncorrectResponse) Reset()         { *m = MsgItemIncorrectResponse{} }
func (m *MsgItemIncorrectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgItemIncorrectResponse) ProtoMessage()    {}
func (*MsgItemIncorrectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{5}
}
func (m *MsgItemIncorrectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemIncorrectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemIncorrectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemIncorrectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemIncorrectResponse.Merge(m, src)
}
func (m *MsgItemIncorrectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemIncorrectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemIncorrectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemIncorrectResponse proto.InternalMessageInfo

type MsgItemShipped struct {
	ProducerAddress string `protobuf:"bytes,1,opt,name=producerAddress,proto3" json:"producerAddress,omitempty"`
	EscrowId        uint64 `protobuf:"varint,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgItemShipped) Reset()         { *m = MsgItemShipped{} }
func (m *MsgItemShipped) String() string { return proto.CompactTextString(m) }
func (*MsgItemShipped) ProtoMessage()    {}
func (*MsgItemShipped) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{6}
}
func (m *MsgItemShipped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemShipped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemShipped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemShipped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemShipped.Merge(m, src)
}
func (m *MsgItemShipped) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemShipped) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemShipped.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemShipped proto.InternalMessageInfo

func (m *MsgItemShipped) GetProducerAddress() string {
	if m != nil {
		return m.ProducerAddress
	}
	return ""
}

func (m *MsgItemShipped) GetEscrowId() uint64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *MsgItemShipped) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgItemShippedResponse struct {
}

func (m *MsgItemShippedResponse) Reset()         { *m = MsgItemShippedResponse{} }
func (m *MsgItemShippedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgItemShippedResponse) ProtoMessage()    {}
func (*MsgItemShippedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{7}
}
func (m *MsgItemShippedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemShippedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemShippedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemShippedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemShippedResponse.Merge(m, src)
}
func (m *MsgItemShippedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemShippedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemShippedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemShippedResponse proto.InternalMessageInfo

type MsgCancelEscrow struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EscrowId    string `protobuf:"bytes,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgCancelEscrow) Reset()         { *m = MsgCancelEscrow{} }
func (m *MsgCancelEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrow) ProtoMessage()    {}
func (*MsgCancelEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{8}
}
func (m *MsgCancelEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrow.Merge(m, src)
}
func (m *MsgCancelEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrow proto.InternalMessageInfo

func (m *MsgCancelEscrow) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelEscrow) GetEscrowId() string {
	if m != nil {
		return m.EscrowId
	}
	return ""
}

func (m *MsgCancelEscrow) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgCancelEscrowResponse struct {
}

func (m *MsgCancelEscrowResponse) Reset()         { *m = MsgCancelEscrowResponse{} }
func (m *MsgCancelEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelEscrowResponse) ProtoMessage()    {}
func (*MsgCancelEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{9}
}
func (m *MsgCancelEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelEscrowResponse.Merge(m, src)
}
func (m *MsgCancelEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelEscrowResponse proto.InternalMessageInfo

type MsgItemNotReceived struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
	EscrowId    uint64 `protobuf:"varint,2,opt,name=escrowId,proto3" json:"escrowId,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgItemNotReceived) Reset()         { *m = MsgItemNotReceived{} }
func (m *MsgItemNotReceived) String() string { return proto.CompactTextString(m) }
func (*MsgItemNotReceived) ProtoMessage()    {}
func (*MsgItemNotReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{10}
}
func (m *MsgItemNotReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemNotReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemNotReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemNotReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemNotReceived.Merge(m, src)
}
func (m *MsgItemNotReceived) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemNotReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemNotReceived.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemNotReceived proto.InternalMessageInfo

func (m *MsgItemNotReceived) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *MsgItemNotReceived) GetEscrowId() uint64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *MsgItemNotReceived) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgItemNotReceivedResponse struct {
}

func (m *MsgItemNotReceivedResponse) Reset()         { *m = MsgItemNotReceivedResponse{} }
func (m *MsgItemNotReceivedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgItemNotReceivedResponse) ProtoMessage()    {}
func (*MsgItemNotReceivedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{11}
}
func (m *MsgItemNotReceivedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItemNotReceivedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItemNotReceivedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItemNotReceivedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItemNotReceivedResponse.Merge(m, src)
}
func (m *MsgItemNotReceivedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgItemNotReceivedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItemNotReceivedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItemNotReceivedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgItemReceived)(nil), "crow.escrow.MsgItemReceived")
	proto.RegisterType((*MsgItemReceivedResponse)(nil), "crow.escrow.MsgItemReceivedResponse")
	proto.RegisterType((*MsgItemDamaged)(nil), "crow.escrow.MsgItemDamaged")
	proto.RegisterType((*MsgItemDamagedResponse)(nil), "crow.escrow.MsgItemDamagedResponse")
	proto.RegisterType((*MsgItemIncorrect)(nil), "crow.escrow.MsgItemIncorrect")
	proto.RegisterType((*MsgItemIncorrectResponse)(nil), "crow.escrow.MsgItemIncorrectResponse")
	proto.RegisterType((*MsgItemShipped)(nil), "crow.escrow.MsgItemShipped")
	proto.RegisterType((*MsgItemShippedResponse)(nil), "crow.escrow.MsgItemShippedResponse")
	proto.RegisterType((*MsgCancelEscrow)(nil), "crow.escrow.MsgCancelEscrow")
	proto.RegisterType((*MsgCancelEscrowResponse)(nil), "crow.escrow.MsgCancelEscrowResponse")
	proto.RegisterType((*MsgItemNotReceived)(nil), "crow.escrow.MsgItemNotReceived")
	proto.RegisterType((*MsgItemNotReceivedResponse)(nil), "crow.escrow.MsgItemNotReceivedResponse")
}

func init() { proto.RegisterFile("escrow/tx.proto", fileDescriptor_8e01f3e45c7c056c) }

var fileDescriptor_8e01f3e45c7c056c = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc7, 0x71, 0x41, 0x6d, 0x19, 0xda, 0xba, 0xda, 0x4a, 0xad, 0xeb, 0x52, 0x17, 0xb9, 0xad,
	0xca, 0xa5, 0x46, 0x4a, 0x9e, 0x20, 0x5f, 0x07, 0x0e, 0x04, 0xc9, 0x51, 0x2e, 0xc9, 0xc9, 0xb1,
	0x57, 0xc4, 0x52, 0xf0, 0xae, 0x76, 0x97, 0x84, 0x9c, 0xf3, 0x02, 0x79, 0xac, 0x1c, 0x39, 0xe6,
	0x18, 0xc1, 0x8b, 0x44, 0xfe, 0x5a, 0xd9, 0x8b, 0x45, 0x3e, 0xe0, 0x38, 0xf3, 0xdf, 0x99, 0xf9,
	0x69, 0xf4, 0x9f, 0x05, 0x1d, 0x73, 0x9f, 0x91, 0xab, 0x9e, 0x98, 0x3a, 0x94, 0x11, 0x41, 0x50,
	0x2b, 0x0e, 0x9d, 0x34, 0x6b, 0x0f, 0x41, 0x1f, 0xf0, 0x51, 0x5f, 0xe0, 0xb1, 0x8b, 0x7d, 0x1c,
	0x5e, 0xe2, 0x00, 0x75, 0xa0, 0x35, 0xe1, 0x98, 0xed, 0x04, 0x01, 0xc3, 0x9c, 0x1b, 0x5a, 0x47,
	0xeb, 0x36, 0xdd, 0x62, 0x0a, 0x99, 0xf0, 0x3e, 0x2d, 0xef, 0x07, 0xc6, 0x9b, 0x8e, 0xd6, 0x6d,
	0xb8, 0x32, 0xb6, 0xbf, 0xc3, 0x37, 0xa5, 0xa1, 0x8b, 0x39, 0x25, 0x11, 0xc7, 0x36, 0x85, 0x4f,
	0x99, 0xb4, 0xef, 0x8d, 0xbd, 0xd1, 0xba, 0xa3, 0xe2, 0xea, 0x20, 0x0e, 0x42, 0x2a, 0x42, 0x12,
	0x19, 0xf5, 0xb4, 0xba, 0x90, 0xb2, 0x0d, 0xf8, 0x5a, 0x9e, 0x28, 0x59, 0x18, 0x7c, 0xce, 0x94,
	0x7e, 0xe4, 0x13, 0xc6, 0xb0, 0x2f, 0x5e, 0x41, 0xd3, 0x7c, 0x11, 0x8d, 0x09, 0x86, 0x3a, 0x53,
	0xf2, 0x4c, 0xe5, 0x6e, 0x8e, 0xce, 0x43, 0x4a, 0x71, 0x80, 0xba, 0xa0, 0x53, 0x46, 0x82, 0x89,
	0xaf, 0x12, 0xa9, 0xe9, 0x8d, 0xed, 0x28, 0x9b, 0x2c, 0x99, 0xc2, 0xc4, 0x1b, 0x7b, 0x5e, 0xe4,
	0xe3, 0x8b, 0x83, 0xa4, 0x21, 0x32, 0xe0, 0x9d, 0xcf, 0xb0, 0x27, 0x08, 0xcb, 0x60, 0xf2, 0x70,
	0xcd, 0xd5, 0xa4, 0xae, 0x29, 0x8e, 0x92, 0x14, 0x02, 0x50, 0xc6, 0x77, 0x48, 0xc4, 0x66, 0x4c,
	0xfa, 0x0c, 0xa0, 0x36, 0x98, 0xcb, 0x53, 0x73, 0xa6, 0xad, 0x9b, 0x06, 0xd4, 0x07, 0x7c, 0x84,
	0x5c, 0xf8, 0x50, 0x3a, 0x9d, 0xb6, 0x53, 0xb8, 0x2d, 0x47, 0xb9, 0x03, 0xf3, 0xcf, 0x2a, 0x35,
	0xef, 0x8d, 0x86, 0xd0, 0x2a, 0x9e, 0xc8, 0x8f, 0xaa, 0xa2, 0x4c, 0x34, 0x7f, 0xaf, 0x10, 0x65,
	0xc3, 0x63, 0xf8, 0x58, 0xf6, 0xf9, 0xcf, 0xaa, 0x2a, 0x29, 0x9b, 0x7f, 0x57, 0xca, 0x2a, 0x67,
	0x6e, 0xd7, 0x4a, 0xce, 0x4c, 0xac, 0xe6, 0x54, 0xec, 0x16, 0x2f, 0xb3, 0xe4, 0xb5, 0xa5, 0x65,
	0x16, 0xd5, 0xe5, 0x65, 0x56, 0x99, 0x07, 0x9d, 0x82, 0xae, 0x3a, 0xe7, 0x57, 0x15, 0x4b, 0xe1,
	0x81, 0xf9, 0xef, 0x89, 0x07, 0x79, 0xf3, 0xdd, 0xff, 0x77, 0x73, 0x4b, 0x9b, 0xcd, 0x2d, 0xed,
	0x61, 0x6e, 0x69, 0xb7, 0x0b, 0xab, 0x36, 0x5b, 0x58, 0xb5, 0xfb, 0x85, 0x55, 0x3b, 0xf9, 0x92,
	0xfc, 0xb8, 0xd3, 0x5e, 0xfe, 0xf5, 0x5e, 0x53, 0xcc, 0xcf, 0xde, 0x26, 0xdf, 0xef, 0xf6, 0x63,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x23, 0x5c, 0xe8, 0x91, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ItemReceived(ctx context.Context, in *MsgItemReceived, opts ...grpc.CallOption) (*MsgItemReceivedResponse, error)
	ItemDamaged(ctx context.Context, in *MsgItemDamaged, opts ...grpc.CallOption) (*MsgItemDamagedResponse, error)
	ItemIncorrect(ctx context.Context, in *MsgItemIncorrect, opts ...grpc.CallOption) (*MsgItemIncorrectResponse, error)
	ItemShipped(ctx context.Context, in *MsgItemShipped, opts ...grpc.CallOption) (*MsgItemShippedResponse, error)
	CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error)
	ItemNotReceived(ctx context.Context, in *MsgItemNotReceived, opts ...grpc.CallOption) (*MsgItemNotReceivedResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ItemReceived(ctx context.Context, in *MsgItemReceived, opts ...grpc.CallOption) (*MsgItemReceivedResponse, error) {
	out := new(MsgItemReceivedResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/ItemReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ItemDamaged(ctx context.Context, in *MsgItemDamaged, opts ...grpc.CallOption) (*MsgItemDamagedResponse, error) {
	out := new(MsgItemDamagedResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/ItemDamaged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ItemIncorrect(ctx context.Context, in *MsgItemIncorrect, opts ...grpc.CallOption) (*MsgItemIncorrectResponse, error) {
	out := new(MsgItemIncorrectResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/ItemIncorrect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ItemShipped(ctx context.Context, in *MsgItemShipped, opts ...grpc.CallOption) (*MsgItemShippedResponse, error) {
	out := new(MsgItemShippedResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/ItemShipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelEscrow(ctx context.Context, in *MsgCancelEscrow, opts ...grpc.CallOption) (*MsgCancelEscrowResponse, error) {
	out := new(MsgCancelEscrowResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/CancelEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ItemNotReceived(ctx context.Context, in *MsgItemNotReceived, opts ...grpc.CallOption) (*MsgItemNotReceivedResponse, error) {
	out := new(MsgItemNotReceivedResponse)
	err := c.cc.Invoke(ctx, "/crow.escrow.Msg/ItemNotReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ItemReceived(context.Context, *MsgItemReceived) (*MsgItemReceivedResponse, error)
	ItemDamaged(context.Context, *MsgItemDamaged) (*MsgItemDamagedResponse, error)
	ItemIncorrect(context.Context, *MsgItemIncorrect) (*MsgItemIncorrectResponse, error)
	ItemShipped(context.Context, *MsgItemShipped) (*MsgItemShippedResponse, error)
	CancelEscrow(context.Context, *MsgCancelEscrow) (*MsgCancelEscrowResponse, error)
	ItemNotReceived(context.Context, *MsgItemNotReceived) (*MsgItemNotReceivedResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ItemReceived(ctx context.Context, req *MsgItemReceived) (*MsgItemReceivedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemReceived not implemented")
}
func (*UnimplementedMsgServer) ItemDamaged(ctx context.Context, req *MsgItemDamaged) (*MsgItemDamagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemDamaged not implemented")
}
func (*UnimplementedMsgServer) ItemIncorrect(ctx context.Context, req *MsgItemIncorrect) (*MsgItemIncorrectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemIncorrect not implemented")
}
func (*UnimplementedMsgServer) ItemShipped(ctx context.Context, req *MsgItemShipped) (*MsgItemShippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemShipped not implemented")
}
func (*UnimplementedMsgServer) CancelEscrow(ctx context.Context, req *MsgCancelEscrow) (*MsgCancelEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelEscrow not implemented")
}
func (*UnimplementedMsgServer) ItemNotReceived(ctx context.Context, req *MsgItemNotReceived) (*MsgItemNotReceivedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemNotReceived not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ItemReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgItemReceived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ItemReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/ItemReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ItemReceived(ctx, req.(*MsgItemReceived))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ItemDamaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgItemDamaged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ItemDamaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/ItemDamaged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ItemDamaged(ctx, req.(*MsgItemDamaged))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ItemIncorrect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgItemIncorrect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ItemIncorrect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/ItemIncorrect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ItemIncorrect(ctx, req.(*MsgItemIncorrect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ItemShipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgItemShipped)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ItemShipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/ItemShipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ItemShipped(ctx, req.(*MsgItemShipped))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/CancelEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelEscrow(ctx, req.(*MsgCancelEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ItemNotReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgItemNotReceived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ItemNotReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crow.escrow.Msg/ItemNotReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ItemNotReceived(ctx, req.(*MsgItemNotReceived))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crow.escrow.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ItemReceived",
			Handler:    _Msg_ItemReceived_Handler,
		},
		{
			MethodName: "ItemDamaged",
			Handler:    _Msg_ItemDamaged_Handler,
		},
		{
			MethodName: "ItemIncorrect",
			Handler:    _Msg_ItemIncorrect_Handler,
		},
		{
			MethodName: "ItemShipped",
			Handler:    _Msg_ItemShipped_Handler,
		},
		{
			MethodName: "CancelEscrow",
			Handler:    _Msg_CancelEscrow_Handler,
		},
		{
			MethodName: "ItemNotReceived",
			Handler:    _Msg_ItemNotReceived_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow/tx.proto",
}

func (m *MsgItemReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EscrowId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemReceivedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemReceivedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemReceivedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgItemDamaged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemDamaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemDamaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemDamagedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemDamagedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemDamagedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgItemIncorrect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemIncorrect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemIncorrect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EscrowId) > 0 {
		i -= len(m.EscrowId)
		copy(dAtA[i:], m.EscrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EscrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemIncorrectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemIncorrectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemIncorrectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgItemShipped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemShipped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemShipped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProducerAddress) > 0 {
		i -= len(m.ProducerAddress)
		copy(dAtA[i:], m.ProducerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProducerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemShippedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemShippedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemShippedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EscrowId) > 0 {
		i -= len(m.EscrowId)
		copy(dAtA[i:], m.EscrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EscrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgItemNotReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemNotReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemNotReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgItemNotReceivedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItemNotReceivedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItemNotReceivedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgItemReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovTx(uint64(m.EscrowId))
	}
	return n
}

func (m *MsgItemReceivedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgItemDamaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovTx(uint64(m.EscrowId))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgItemDamagedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgItemIncorrect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgItemIncorrectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgItemShipped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProducerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovTx(uint64(m.EscrowId))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgItemShippedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EscrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgItemNotReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovTx(uint64(m.EscrowId))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgItemNotReceivedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgItemReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemReceivedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemReceivedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemReceivedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemDamaged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemDamaged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemDamaged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemDamagedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemDamagedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemDamagedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemIncorrect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemIncorrect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemIncorrect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemIncorrectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemIncorrectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemIncorrectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemShipped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemShipped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemShipped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProducerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemShippedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemShippedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemShippedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemNotReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemNotReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemNotReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItemNotReceivedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItemNotReceivedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItemNotReceivedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
